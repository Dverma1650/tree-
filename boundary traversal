void leftboundary(Node*root,vector<int>&v)
{
    if(root==NULL)
     return;
   if(root->left)
    {
       v.push_back(root->data);
       leftboundary(root->left,v);
    }
   else if(root->right)
   {
      v.push_back(root->data);
      leftboundary(root->right,v);
    }
}
void leafnode(Node*root,vector<int>&v)
{
    if(root==NULL)
     return;
     leafnode(root->left,v);
     if(!root->left && !root->right)
      v.push_back(root->data);
      leafnode(root->right,v);
}
void rightboundary(Node*root,vector<int>&v)
{
    if(root==NULL)
     return;
   if(root->right)
    {
       rightboundary(root->right,v);
       v.push_back(root->data);
       
    }
   else if(root->left)
   {
       rightboundary(root->left,v);
      v.push_back(root->data);
     
    }
}
class Solution {
public:
    vector <int> printBoundary(Node *root)
    {
        //Your code here
        vector<int>v;
        v.push_back(root->data);
        leftboundary(root->left,v);
        leafnode(root,v);
        rightboundary(root->right,v);
        return v;
    }
};
